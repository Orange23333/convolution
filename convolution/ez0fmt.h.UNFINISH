// EaZy 0 ForMAt

#ifndef __EZ0FMT_H_
	#define __EZ0FMT_H_
	
	#include <string>
	#include <stack>
	
	#include "qstfmt.h"
	#include "qstnode.h"
	#include "utility.h"

class EasyFormat0 : public QuestionFormat{
private:
	inline void _NewLine(int &line, int &row);
	inline void _LevelUp();
	inline void _LevelDown(std::vector<QuestionNode*> &leveledNodes);
	
	inline bool IsNumber(char ch)
    {
        return '0' <= ch && ch <= '9';
    }
    inline bool IsHexNumber(char ch)
    {
        return ('0' <= ch && ch <= '9') || ('A' <= ch && ch <= 'F') || ('a' <= ch && ch <= 'f');
    }
    inline bool IsWhiteSpace(char ch)
    {
        return ch == ' ' || ch == '\t';
    }
    
    //不检查范围
    inline unsigned char _XToByte(char hexNumber){
		if('0' <= ch && ch <= '9'){
			return hexNumber-'0';
		}else if('A' <= ch && ch <= 'F'){
			return hexNumber-'A'+10;
		}else{
			return hexNumber-'a'+10;
		}
    }
    
    inline unsigned char _DToByte(char decNumber){
		return hexNumber-'0';
	}
	
	inline int ReadInQuotes(const std::string text, const int begin, std::string &_out){
		int i, j;
		std::string tempStr="";
		
		for(i=begin+1;i<text.length();i++){
			if(text[i]=='\\'){
				if(i+1<text.length()){
					switch (text[++i])
                    {
                        case 'a':
                            tempStr+='\a';
                            break;
                        case 'b':
                            tempStr+='\b';
                            break;
                        case 'f':
                            tempStr+='\f';
                            break;
                        case 'n':
                            tempStr+='\n';
                            break;
                        case 'r':
                            tempStr+='\r';
                            break;
                        case 't':
                            tempStr+='\t';
                            break;
                        case 'v':
                            tempStr+='\v';
                            break;
                        case '\\':
                            tempStr+='\\';
                            break;
                        case '\'':
                            tempStr+='\'';
                            break;
                        case '"':
                            tempStr+='"';
                            break;
                        case '?':
                            tempStr+='?';
                            break;
                        case '\n':
                        case '\r':
							break;
                        case 'U':
                        case 'u':
                            if (i + 4 >= text.length() || !IsHexNumber(text[i+1]) || !IsHexNumber(text[i+2]) || !IsHexNumber(text[i+3]) || !IsHexNumber(text[i+4]))
                            {
                                PrintMessage("！错误", "Unicode转义字符格式错误，它必须有且仅有4个十六进制数字。！");
								return -1;
                            }
                            
                            tempStr+=(_XToByte(text[i])<<4)|_XToByte(text[i+1]);
                            tempStr+=(_XToByte(text[i+2])<<4)|_XToByte(text[i+3]);
                            i += 4;
                            break;
                        case 'x':
                            if (i + 2 > text.length() || !IsHexNumber(text[i+1]) || !IsHexNumber(text[i+2]))
                            {
                                PrintMessage("！错误", "十六进制转义字符格式错误，它必须有且仅有2个十六进制数字。！");
								return -1;
                            }
                            
                            tempStr+=(_XToByte(text[i])<<4)|_XToByte(text[i+1]);
                            i += 2;
                            break;
                        default:
                            if (text[i] == '0' && i + 1 < text.length() && (!IsNumber(text[i + 1])))
                            {
                                tempStr+='\0';
                            }
                            else if (IsNumber(text[i]))//目前懒得把异常抛出这个数字格式不对
                            {
								for(j=1;j<=3;j++){
									if(text[i+j]=='8' || text[i+j]=='9'){
										PrintMessage("！错误", "八进制转义字符格式错误，其中不能出现数字8或9。！");
										return -1;
									}else if(!IsNumber(text[i+j])){
										PrintMessage("！错误", "八进制转义字符格式错误，它必须有且仅有3个八进制数字。！");
										return -1;
									}
								}
								if(text[i]>='4'){
									PrintMessage("！错误", "八进制转义字符格式错误，其数值应当小于0400。！");
									return -1;
								}
                                
                                tempStr+=(_DToByte(text[i])<<6)|(_DToByte(text[i+1])<<3)|_DToByte(text[i+2]);
                                i += 2;
                            }
                            else
                            {
                                PrintMessage("！错误", "未知的转义字符！");
								return -1;
                            }
                            break;
                    }
				}
				// 没有必要
				//else{
				//	PrintMessage("！错误", "缺失字符'\"'！");
				//	return -1;
				//}
			}else if(text[i]=='"'){
				break;
			}else{
				tempStr+=text[i];
			}
		}
		
		if(i>=text.length()){
			PrintMessage("！错误", "缺失字符'\"'！");
			return -1;
		}
		
		return i - begin + 1;
	}
public:
	//请务必从新的一行开始
	int ReadFromText(const std::string text){
		int i, r;
		std::string quote;
		
		for(i=begin+1;i<text.length();i++){
		#error HERE
			r = ReadInQuotes(const std::string text, const int begin, std::string &_out);
			if(r<0){
				return r;
			}
		}
	}
	
	EasyFormat();
	~EasyFormat();
};

#endif